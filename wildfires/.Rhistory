library("kableExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("lintr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("magrittr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("tibble", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
g_key <- google.key
base <- "https://www.googleapis.com/civicinfo/v2/representatives"
query <- list(address = "95120", key = g_key)
res <- GET(base, query=query)
google_data <- content(res, "text") %>% fromJSON()
officials <- flatten(google_data$officials)
offices <- flatten(google_data$offices)
offices_unnest <- unnest(offices, officialIndices, .drop=FALSE)
elected_officials <- cbind(officials, offices_unnest)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
officials <- flatten(google_data$officials)
offices <- flatten(google_data$offices)
offices_unnest <- unnest(offices, officialIndices, .drop=FALSE)
elected_officials <- cbind(officials, offices_unnest)
elected_officials$position <- elected_officials[, 9]
g_key <- google.key
base <- "https://www.googleapis.com/civicinfo/v2/representatives"
query <- list(address = "95120", key = g_key)
res <- GET(base, query=query)
google_data <- content(res, "text") %>% fromJSON()
officials <- flatten(google_data$officials)
offices <- flatten(google_data$offices)
offices_unnest <- unnest(offices, officialIndices, .drop=FALSE)
elected_officials <- cbind(officials, offices_unnest)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
officials <- flatten(google_data$officials)
offices <- flatten(google_data$offices)
offices_unnest <- unnest(offices, officialIndices, .drop=FALSE)
elected_officials <- cbind(officials, offices_unnest)
elected_officials$position <- elected_officials[, 9]
propublica.key <- "9fXjmy9UKF99WIPtJppvZj4cyiJUnQTbUZC8Z3aa"
google.key <- "AIzaSyAOlTKNlftvgZX-sHEtbgTDX8bhUPgAock"
g_key <- google.key
base <- "https://www.googleapis.com/civicinfo/v2/representatives"
query <- list(address = "95120", key = g_key)
res <- GET(base, query=query)
google_data <- content(res, "text") %>% fromJSON()
officials <- flatten(google_data$officials)
offices <- flatten(google_data$offices)
offices_unnest <- unnest(offices, officialIndices, .drop=FALSE)
elected_officials <- cbind(officials, offices_unnest)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
officials <- flatten(google_data$officials)
offices <- flatten(google_data$offices)
offices_unnest <- unnest(offices, officialIndices, .drop=FALSE)
elected_officials <- cbind(officials, offices_unnest)
elected_officials$position <- elected_officials[, 9]
View(elected_officials)
urls <- rep(elected_officials$urls)
elected_officials$position <- paste0("[", elected_officials$position, "](", urls, ")")
urls_photo <- rep(elected_officials$photoUrl)
elected_officials$photo <- paste0("![", elected_officials$photoUrl, "](", urls_photo, ")")
elected_reps <- elected_officials[, c("name", "position", "party", "emails", "photo")]
View(elected_reps)
elected_reps %>%
kable() %>%
kable_styling()
p_key <- propublica.key
base_p <- "https://api.propublica.org/congress/v1/"
congress <- "115/"
chamber <- "house/"
members <- "members.json"
uri_p <- paste0(base_p, congress, chamber, members)
base_uri <- "https://api.propublica.org/congress/v1/115/house/members.json"
res_p <- httr::GET(base_uri, add_headers("X-API-Key" = p_key))
propublica_content <- content(res_p, "text")
propublica_data <- fromJSON(propublica_content)
propublica_df <- flatten(propublica_data$results)
members_propublica <- as.data.frame(propublica_df$members)
CA_members <- members_propublica %>%
filter(state == "CA")
graph_party <- ggplot(data = CA_members) +
geom_bar(mapping = aes(x = CA_members$party, fill = party)) +
labs(
title = "Party Affiliations",
x = "Party",
y = "# of Representatives"
) +
scale_fill_manual("", values = c(D = "blue", R = "red"), guide = FALSE) +
coord_flip()
boxplot(missed_votes ~ gender, data = CA_members,
xlab = "Gender", ylab = "Missed Votes",
main = "Missed Votes by Gender")
ro_khanna <- CA_members %>%
filter(last_name == "Khanna")
name <- paste(ro_khanna$first_name, ro_khanna$last_name)
rk_party <- paste0(ro_khanna[["party"]], "emocrat")
rk_age <- trunc((Sys.Date() - as.Date(ro_khanna[["date_of_birth"]])) / 365)
rk_twitter <- ro_khanna[["twitter_account"]]
rk_id <- "K000389"
rk_uri <- paste0(base_p, "members/", rk_id, "/votes.json")
rk_res <- GET(rk_uri, add_headers("X-API-Key" = p_key))
rk_content <- content(rk_res, "text") %>% fromJSON()
rk_votes <- rk_content$results$votes[[1]]
rk_votes_data <- flatten(rk_votes, recursive=TRUE)
total_votes_uri <- paste0(base_p, chamber, "votes/recent.json")
total_votes_res <- GET(total_votes_uri, add_headers("X-API-Key" = p_key))
total_votes_content <- content(total_votes_res, "text") %>%  fromJSON()
total_votes <- total_votes_content$results$votes
total_votes_data <- flatten(total_votes, recursive = TRUE)
recent_votes <- inner_join(rk_votes_data, total_votes_data, by = c("bill.bill_id" = "bill.bill_id", "question" = "question", "date" = "date", "time" = "time"))
recent_votes <- recent_votes %>%
mutate(majority_vote = ifelse(
total.yes.y > total.no.y, "Yes", "No"
))
recent_votes <- recent_votes %>%
mutate(rep_majority = ifelse(
majority_vote == position, TRUE, FALSE
))
with_majority <- (nrow(recent_votes %>% filter(rep_majority == "TRUE")) / nrow(recent_votes)) * 100
View(propublica_df)
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(elected_reps)
gsub(NULL, "-", elected_officials)
gsub("NULL", "-", elected_officials)
View(elected_officials)
View(elected_reps)
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(elected_reps)
View(elected_officials)
emails_rep <- rep(elected_officials$emails)
View(emails_rep)
emails_rep <- rep(elected_officials$emails)
elected_officials$email <- ifelse(
is.null(elected_officials$emails),
"",
elected_officials$emails
)
elected_officials$email <- ifelse(
is.null(elected_officials$emails),
"",
elected_officials$emails
)
elected_officials$email <- ifelse(
is.na(elected_officials$emails),
"",
elected_officials$emails
)
elected_officials$email <- ifelse(
is.null(elected_officials$emails),
"",
elected_officials$emails
)
elected_officials$emails
elected_officials$email <- ifelse(
is.null(elected_officials$email),
"",
elected_officials$emails
)
View(elected_officials)
elected_officials$email <- ifelse(
is.null(elected_officials$emails),
"",
elected_officials$emails
)
View(elected_officials)
elected_reps <- elected_officials[, c("name", "position", "party", "emails", "photo")]
is.null(elected_officials$emails)
elected_officials$emails
elected_officials$email <- ifelse(
is.null(elected_officials$emails),
"-",
elected_officials$emails
)
View(elected_officials)
elected_officials$email <- ifelse(
is.na(elected_officials$emails),
"-",
elected_officials$emails
)
View(elected_officials)
elected_officials$email <- ifelse(
is.null(elected_officials$emails),
"-",
elected_officials$emails
)
View(elected_officials)
elected_officials[elected_officials == "NULL"] <- "-"
View(elected_officials)
elected_reps <- elected_officials[, c("name", "position", "party", "emails","phones", "photo")]
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(elected_reps) %>% kable_styling("striped")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(dplyr)
library(knitr)
library(jsonlite)
library(ggplot2)
library(httr)
library(tidyr)
library(kableExtra)
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(elected_reps) %>% kable_styling("striped")
library(ggplot2)
install.packages("ggplot")
install.packages("ggplot1")
data <- read.delim("~/Desktop/info_201/uw-elevations.csv.bz2")
data
ggplot(data) +
geom_point(aes(lon, lat, col=elevation))
View(data)
ggplot(data) +
geom_point(aes(lon, lat, col=elevation)) +
scale_color_gradient(colors=terrain.colors(10))
ggplot(data) +
geom_point(aes(lon, lat, col=elevation)) +
scale_color_gradientn(colors=terrain.colors(10))
View(data)
ggplot(data) +
geom_point(aes(lon, lat, col=elevation)) +
scale_color_gradientn(colors=terrain.colors(10)) +
coord_quickmap()
ggplot(data) +
geom_point(aes(lon, lat, col=elevation)) +
scale_color_gradientn(colors=terrain.colors(10)) +
coord_quickmap() +
labs(x="longitude (deg)", color="elevation (m)")
shiny::runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$lonSlider <- renderUI({
sliderInput("lonRange",
"Enter longitude range",
min(ufo_data$lng), max(ufo_data$lng),
c(min(ufo_data$lng), max(ufo_data$lng))
)
})
output$latSlider <- renderUI({
sliderInput("latRange",
"Enter latitude range",
min(ufo_data$lat), max(ufo_data$lat),
c(min(ufo_data$lat), max(ufo_data$lat))
)
})
output$plot <- renderPlot({
subset <- ufo_data %>%
filter(lng >= input$lonRange[1],
lng <= input$lonRange[2],
lat >= input$latRange[1],
lat <= input$latRange[2])
ggplot(subset) +
geom_point(aes(lng, lat), size = 0.5) +
coord_quickmap()
})
}
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
ufo_data <- read.delim("data/UFOCoords.csv.bz2", stringsAsFactors = FALSE)
setwd("~/Desktop/info_201/a8-app-shruthiraj24")
ufo_data <- read.delim("data/UFOCoords.csv.bz2", stringsAsFactors = FALSE)
runApp('a8_app')
runApp('a8_app')
runApp('a8_app')
View(ufo_data)
ufo_data <- read.csv("data/UFOCoords.csv.bz2")
View(ufo_data)
runApp('a8_app')
runApp('a8_app')
library(maps)
runApp('a8_app')
runApp('a8_app')
runApp('~/Desktop/info_201/server')
world <- map_data("world")
with_map <- ggplot(subset) +
geom_polygon(data = world, aes(x=long, y=lat, group=group)) +
geom_point(aes(lng, lat), size = 0.5) +
coord_quickmap()
subset <- ufo_data %>%
filter(lng >= input$lonRange[1],
lng <= input$lonRange[2],
lat >= input$latRange[1],
lat <= input$latRange[2])
runApp('a8_app')
without_map
without_map <- ggplot(subset) +
geom_point(aes(lng, lat), size = 0.5) +
coord_quickmap()
world <- map_data("world")
runApp('a8_app')
runApp('~/Desktop/info_201/server')
runApp('a8_app')
runApp('a8_app')
runApp('a8_app')
runApp('a8_app')
runApp('a8_app')
runApp('a8_app')
runApp('a8_app')
number_obs <- nrow(ufo_data)
number_obs
runApp('a8_app')
runApp('a8_app')
filter(Country = "USA") %>%
nrow()
number_US <- ufo_data %>%
filter(Country = "USA") %>%
nrow()
number_US <- ufo_data %>%
filter(Country == "USA") %>%
nrow()
number_US
runApp('a8_app')
number_USA <- ufo_data %>%
filter(Country == "USA") %>%
nrow()
number_CA <- ufo_data %>%
filter(Country == "Canada") %>%
nrow()
number_USA <- ufo_data %>%
filter(Country == "USA") %>%
nrow()
number_USA
number_CA
number_CA <- ufo_data %>%
filter(Country == "CANADA") %>%
nrow()
number_CA
runApp('a8_app')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='shruthiraj24',
token='209171474F9BD93312B711C244C5EAE2',
secret='<SECRET>')
rsconnect::setAccountInfo(name='shruthiraj24',
token='209171474F9BD93312B711C244C5EAE2',
secret='hkjHwyGHyz75ND/9MFdQP9hOPKbVG5mRJOLt6Xzt')
library(rsconnect)
rsconnect::deployApp("a8_app")
runApp('a8_app')
setwd("~/")
getwd()
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
setwd("~/Desktop/info_201/a8-app-shruthiraj24")
runApp('a8_app')
ufo_data <- read.csv("data/UFOCoords.csv.bz2")
runApp('a8_app')
runApp('a8_app')
setwd("~/")
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
deployApp()
rsconnect::deployApp("a8_app")
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
library(rsconnect)
deployApp()
deployApp()
rsconnect::setAccountInfo(name='shruthiraj24',
token='209171474F9BD93312B711C244C5EAE2',
secret='hkjHwyGHyz75ND/9MFdQP9hOPKbVG5mRJOLt6Xzt')
library(rsconnect)
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
deployApp()
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
n
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(dplyr)
library(magrittr)
library(maps)
library(ggplot2)
library(R.utils)
# Define server logic required to draw a histogram
server <- function(input, output) {
ufo_data <- read.csv("UFOCoords.csv.bz2")
output$lonSlider <- renderUI({
sliderInput("lonRange",
"Enter longitude range",
min(ufo_data$lng), max(ufo_data$lng),
c(min(ufo_data$lng), max(ufo_data$lng))
)
})
output$latSlider <- renderUI({
sliderInput("latRange",
"Enter latitude range",
min(ufo_data$lat), max(ufo_data$lat),
c(min(ufo_data$lat), max(ufo_data$lat))
)
})
number_USA <- ufo_data %>%
filter(Country == "USA") %>%
nrow()
number_CA <- ufo_data %>%
filter(Country == "CANADA") %>%
nrow()
output$plot <- renderPlot({
subset <- ufo_data %>%
filter(lng >= input$lonRange[1],
lng <= input$lonRange[2],
lat >= input$latRange[1],
lat <= input$latRange[2])
world <- map_data("world")
with_map <- ggplot(subset) +
geom_polygon(data = world, aes(x=long, y=lat, group=group), fill="black") +
geom_point(aes(lng, lat), size = 0.5, color = "red") +
xlim(input$lonRange[1], input$lonRange[2]) +
ylim(input$latRange[1], input$latRange[2]) +
coord_quickmap()
without_map <- ggplot(subset) +
geom_point(aes(lng, lat), size = 0.5, color = "red") +
coord_quickmap()
if(input$map == "with map") {
print(with_map)
}else{
print(without_map)
}
})
}
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
shiny::runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
canada <- map_data("worldHires", "Canada")
usa <- map_data("worldHires", "USA")
canada_subset <- canada %>%
filter(long >= input$lonRange[1],
long <= input$lonRange[2],
lat >= input$latRange[1],
lat <= input$latRange[2])
usa_subset <- usa %>%
filter(long >= input$lonRange[1],
long <= input$lonRange[2],
lat >= input$latRange[1],
lat <= input$latRange[2])
with_map <- ggplot(subset) +
geom_polygon(data = canada_subset, aes(x=long, y=lat, group=group),
fill = "black") +
geom_polygon(data = usa_subset, aes(x=long, y=lat, group=group),
fill = "black") +
geom_point(aes(lng, lat), size = 0.5, color = "red") +
coord_quickmap()
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
View(ufo_data)
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
rsconnect::deployApp("~/Desktop/info_201/a8-app-shruthiraj24/a8_app")
shiny::runApp('Desktop/info_201/a8-app-shruthiraj24/a8_app')
shiny::runApp('Desktop/info_201/final_project/wildfires')
runApp('Desktop/info_201/final_project/wildfires')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
